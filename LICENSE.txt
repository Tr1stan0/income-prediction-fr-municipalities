This file is part of git-test.
Copyright (C) 2025 Tr1stan0

This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.










def main():
    board = chess.Board()
    load_images()
    selected_square = None
    move_made = False
    game_over_message = None  # Message de fin de jeu, initialement vide
    running = True
    game_over = False
    dragging_piece = None  # Pièce en cours de déplacement
    offset = (0, 0)  # Décalage de la pièce pour la suivre avec la souris
    while running:
        legal_moves = []
        if selected_square is not None:
            legal_moves = [move for move in board.legal_moves if move.from_square == selected_square]
        draw_board(selected_square, legal_moves)
        draw_pieces(board)

        if game_over_message:
            display_message(game_over_message)

        pygame.display.flip()

        if not game_over and (board.is_checkmate() or board.is_stalemate() or board.is_insufficient_material() or board.can_claim_threefold_repetition() or board.can_claim_fifty_moves()):
            game_over_message = check_special_states(board, game_over_message)
            game_over = True  # Le jeu est terminé, donc on n'acceptera plus de coups

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            elif event.type == pygame.MOUSEBUTTONDOWN:
                location = pygame.mouse.get_pos()
                col = location[0] // (WIDTH // 8)
                row = 7 - (location[1] // (HEIGHT // 8))
                square = chess.square(col, row)

                if selected_square is None:
                    if board.piece_at(square) and (board.turn == board.piece_at(square).color):
                        selected_square = square
                else:
                    if selected_square == square:
                        selected_square = None
                    else:
                        move = chess.Move(selected_square, square)
                        if move in board.legal_moves:
                            board.push(move)
                            move_made = True
                        else:
                            # Gestion promotion automatique dame
                            if chess.Move.from_uci(chess.square_name(selected_square) + chess.square_name(square) + 'q') in board.legal_moves:
                                board.push(chess.Move.from_uci(chess.square_name(selected_square) + chess.square_name(square) + 'q'))
                                move_made = True
                        selected_square = None

            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_u:
                    if board.move_stack:
                        board.pop()

        if move_made:
            if not game_over:
                game_over_message = check_special_states(board, game_over_message)
            move_made = False
    pygame.quit()























def draw_pieces(board):
    for square in chess.SQUARES:
        piece = board.piece_at(square)
        if piece:
            col = chess.square_file(square)
            row = 7 - chess.square_rank(square)
            piece_str = piece.symbol()
            img_key = ('w' if piece_str.isupper() else 'b') + piece_str.lower()
            SCREEN.blit(IMAGES[img_key], pygame.Rect(col * WIDTH // 8, row * HEIGHT // 8, WIDTH // 8, HEIGHT // 8))






def draw_pieces(board, dragged_piece=None, offset=(0, 0)):
    for square in chess.SQUARES:
        piece = board.piece_at(square)
        if piece:
            col = chess.square_file(square)
            row = 7 - chess.square_rank(square)
            piece_str = piece.symbol()
            img_key = ('w' if piece_str.isupper() else 'b') + piece_str.lower()
            rect = pygame.Rect(col * WIDTH // 8, row * HEIGHT // 8, WIDTH // 8, HEIGHT // 8)
            if dragged_piece is not None and square == dragged_piece:
                # Afficher la pièce déplacée à la position de la souris
                rect.x = offset[0] - WIDTH // 16
                rect.y = offset[1] - HEIGHT // 16
            SCREEN.blit(IMAGES[img_key], rect)